name: Continuous Integration

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  backend-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # v3.5.3
      
      - name: Set up Python
        uses: actions/setup-python@v4 # v4.7.0
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: cd src/backend && pip install -r requirements.txt && pip install -r test_requirements.txt
      
      - name: Run linting
        run: cd src/backend && bash scripts/lint.sh

  backend-test:
    runs-on: ubuntu-latest
    needs: [backend-lint]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
      
      minio:
        image: minio/minio
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        ports:
          - 9000:9000
          - 9001:9001
        options: --health-cmd "curl -f http://localhost:9000/minio/health/live || exit 1" --health-interval 10s --health-timeout 5s --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # v3.5.3
      
      - name: Set up Python
        uses: actions/setup-python@v4 # v4.7.0
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: cd src/backend && pip install -r requirements.txt && pip install -r test_requirements.txt
      
      - name: Run tests
        run: cd src/backend && bash scripts/test.sh
        env:
          POSTGRES_SERVER: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          REDIS_SERVER: localhost
          MINIO_SERVER: localhost:9000
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
          TESTING: '1'
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v3 # v3.1.2
        with:
          name: backend-coverage
          path: src/backend/coverage.xml
          retention-days: 7

  frontend-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # v3.5.3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3 # v3.8.1
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: cd src/web && npm ci
      
      - name: Run linting
        run: cd src/web && npm run lint
      
      - name: Run type checking
        run: cd src/web && npm run typecheck

  frontend-test:
    runs-on: ubuntu-latest
    needs: [frontend-lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # v3.5.3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3 # v3.8.1
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: cd src/web && npm ci
      
      - name: Run tests
        run: cd src/web && npm run test:coverage
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v3 # v3.1.2
        with:
          name: frontend-coverage
          path: src/web/coverage
          retention-days: 7

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # v3.5.3
      
      - name: Set up Python
        uses: actions/setup-python@v4 # v4.7.0
        with:
          python-version: '3.10'
      
      - name: Install safety
        run: pip install safety
      
      - name: Check Python dependencies
        run: safety check -r src/backend/requirements.txt
      
      - name: Set up Node.js
        uses: actions/setup-node@v3 # v3.8.1
        with:
          node-version: '18'
      
      - name: Check JavaScript dependencies
        run: cd src/web && npm audit --production

  build-check:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, dependency-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # v3.5.3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2 # v2.10.0
      
      - name: Build backend image
        uses: docker/build-push-action@v4 # v4.1.1
        with:
          context: ./src/backend
          file: ./src/backend/docker/Dockerfile
          push: false
          load: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build frontend image
        uses: docker/build-push-action@v4 # v4.1.1
        with:
          context: ./src/web
          file: ./src/web/src/docker/Dockerfile
          push: false
          load: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build worker image
        uses: docker/build-push-action@v4 # v4.1.1
        with:
          context: ./src/backend
          file: ./src/backend/docker/celery/Dockerfile
          push: false
          load: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

  ci-success:
    runs-on: ubuntu-latest
    needs: [build-check]
    steps:
      - name: CI Success
        run: echo "All CI checks passed successfully!"