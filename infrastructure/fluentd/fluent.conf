# Version: fluent/fluentd:latest

# System-wide configuration
<system>
  log_level info
  workers 2
  flush_interval 5s
</system>

# Sources - Define where logs come from

# Docker logs via forward protocol
<source>
  @type forward
  port 24224
  bind 0.0.0.0
  tag docker
</source>

# Nginx access logs
<source>
  @type tail
  path /var/log/nginx/access.log
  pos_file /fluentd/log/nginx-access.pos
  tag nginx.access
  <parse>
    @type nginx
  </parse>
</source>

# Nginx error logs
<source>
  @type tail
  path /var/log/nginx/error.log
  pos_file /fluentd/log/nginx-error.pos
  tag nginx.error
  <parse>
    @type regexp
    expression /^(?<time>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}) \[(?<log_level>\w+)\] (?<pid>\d+).(?<tid>\d+): (?<message>.*)$/
  </parse>
</source>

# Application logs via HTTP endpoint
<source>
  @type http
  port 9880
  bind 0.0.0.0
  tag app
</source>

# Filters - Process and transform logs

# Add source type to Docker logs
<filter docker.**>
  @type record_transformer
  <record>
    source_type docker
  </record>
</filter>

# Add source type to Nginx logs
<filter nginx.**>
  @type record_transformer
  <record>
    source_type nginx
  </record>
</filter>

# Add source type to application logs
<filter app.**>
  @type record_transformer
  <record>
    source_type application
  </record>
</filter>

# Add timestamp and host information to all logs
<filter **>
  @type record_transformer
  <record>
    @timestamp ${time.strftime('%Y-%m-%dT%H:%M:%S%z')}
    host ${hostname}
  </record>
</filter>

# Matches - Define where logs go

# Send all logs to Elasticsearch
<match **>
  @type elasticsearch
  host elasticsearch
  port 9200
  logstash_format true
  logstash_prefix molecular-platform
  include_tag_key true
  tag_key fluentd_tag
  flush_interval 5s
  retry_limit 17
  retry_wait 1s
  max_retry_wait 60s
  reconnect_on_error true
  
  <buffer>
    @type file
    path /fluentd/log/buffer
    flush_mode interval
    flush_interval 5s
    flush_thread_count 2
    retry_type exponential_backoff
    retry_max_interval 30s
    overflow_action block
  </buffer>
</match>